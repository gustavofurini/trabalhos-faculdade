# -*- coding: utf-8 -*-
"""T3 - Grafo de PrecedÃªncia.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BNH7uIvCmN8b15dtSX59AjNWp-oBEsP0
"""

import time
from multiprocessing import Process, Semaphore

def thread_A(semaphore_2, semaphore_4, N_A, T_A):
    print('A: iniciando contagem (n={}; t={})'.format(N_A, T_A), flush=True)
    for i in range(1, N_A+1):
        time.sleep(T_A)
        print(f'A:{i}', flush=True)
    print('A: finalizando contagem', flush=True)
    semaphore_2.release()
    semaphore_4.release()

def thread_B(semaphore_2, semaphore_3, N_B, T_B):
    semaphore_2.acquire()
    print('B: iniciando contagem (n={}; t={})'.format(N_B, T_B), flush=True)
    for i in range(1, N_B+1):
        time.sleep(T_B)
        print(f'B:{i}', flush=True)
    print('B: finalizando contagem', flush=True)
    semaphore_3.release()

def thread_C(semaphore_4, semaphore_3, N_C, T_C):
    semaphore_4.acquire()
    print('C: iniciando contagem (n={}; t={})'.format(N_C, T_C), flush=True)
    for i in range(1, N_C+1):
        time.sleep(T_C)
        print(f'C:{i}', flush=True)
    print('C: finalizando contagem', flush=True)
    semaphore_3.release()

def thread_D(semaphore_3, N_D, T_D):
    semaphore_3.acquire()
    semaphore_3.acquire()
    print('D: iniciando contagem (n={}; t={})'.format(N_D, T_D), flush=True)
    for i in range(1, N_D+1):
        time.sleep(T_D)
        print(f'D:{i}', flush=True)
    print('D: finalizando contagem', flush=True)

if __name__ == "__main__":

    N_A, T_A = 5, 1
    N_B, T_B = 5, 1
    N_C, T_C = 5, 1
    N_D, T_D = 5, 1

    semaphore_2 = Semaphore(0)
    semaphore_3 = Semaphore(0)
    semaphore_4 = Semaphore(0)

    p_A = Process(target=thread_A, args=(semaphore_2, semaphore_4, N_A, T_A))
    p_A.start()

    p_B = Process(target=thread_B, args=(semaphore_2, semaphore_3, N_B, T_B))
    p_B.start()

    p_C = Process(target=thread_C, args=(semaphore_4, semaphore_3, N_C, T_C))
    p_C.start()

    p_D = Process(target=thread_D, args=(semaphore_3, N_D, T_D))
    p_D.start()

    p_A.join()
    p_B.join()
    p_C.join()
    p_D.join()