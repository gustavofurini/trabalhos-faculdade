# -*- coding: utf-8 -*-
"""random_graph

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JaEqpzHJ-ffBgYhGWpgbOPoX3IUMOmnd
"""

import numpy as np;
import matplotlib.pyplot as plt

#gnn e gnp

class ErdosRenyi_Gnp:
  def __init__(self, n_vertices, prob):
    self.ordem = n_vertices
    self.tamanho = 0
    self.matriz_adjacencias = np.zeros([n_vertices, n_vertices])

    for i in range(n_vertices - 1):
      for j in range(i+1, n_vertices):
        random = np.random.random()
        if random < prob:
          self.matriz_adjacencias[i,j] = 1
          self.matriz_adjacencias[j,i] = 1
          self.tamanho += 1

  def to_string(self):
    return f"Este é um grafo com {self.ordem} vértices e {self.tamanho} arestas."

  def get_grau(self):
    graus = []
    for i in range(self.ordem):
      graus.append(np.sum(self.matriz_adjacencias[i]))
    return graus

G1 = ErdosRenyi_Gnp(200, 0.05);
print(G1.to_string())
graus = G1.get_grau()

media = np.mean(graus)
plt.figure(figsize=(5,2))
plt.title("Distribuição de graus do modelo Erdos Renyi")
plt.hist(graus, color='green', edgecolor='black')
plt.axvline(x=media, color='yellow', linestyle='dashed', label=f'Média: {media}')
plt.xlabel("Grau")
plt.ylabel("Frequência")
plt.legend()
plt.show()

from logging import exception
class ErdosRenyi_Gnm:
  def __init__(self, n_vertices, n_arestas):

    self.ordem = n_vertices
    self.tamanho = 0
    self.matriz_adjacencias = np.zeros([n_vertices, n_vertices])

    while self.tamanho < n_arestas:
      A = np.random.randint(self.ordem)
      B = np.random.randint(self.ordem)
      if(A != B) and (self.matriz_adjacencias[A,B] == 0):
        self.matriz_adjacencias[A, B] = 1
        self.matriz_adjacencias[B, A] = 1
        self.tamanho += 1

    #validação de n_arestas < (n * n - 1 )/2


  def to_string(self):
    return f"Este é um grafo com {self.ordem} vértices e {self.tamanho} arestas."

  def get_grau(self):
    graus = []
    for i in range(self.ordem):
      graus.append(np.sum(self.matriz_adjacencias[i]))
    return graus

G2 = ErdosRenyi_Gnm(5000, 200000 )
print(G2.to_string())
graus = G2.get_grau()

media = np.mean(graus)
plt.figure(figsize=(5,2))
plt.title("Distribuição de graus do modelo Erdos Renyi")
plt.hist(graus, color='green', edgecolor='black')
plt.axvline(x=media, color='yellow', linestyle='dashed', label=f'Média: {media}')
plt.xlabel("Grau")
plt.ylabel("Frequência")
plt.legend()
plt.show()